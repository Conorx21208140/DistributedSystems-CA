const grpc = require('grpc');
const protoLoader = require('@grpc/proto-loader');
const path = require('path');

// Load lighting.proto
const packageDefinition = protoLoader.loadSync(
    path.resolve(__dirname, 'proto/lighting.proto'),
    { keepCase: true, longs: String, enums: String, arrays: true }
);
const lightingProto = grpc.loadPackageDefinition(packageDefinition).smart_lighting;

// Implement LightingService
const lightingService = {
    TurnOn: (call, callback) => {
        // Simulate turning on the light
        console.log(`Turning on light in room: ${call.request.room_id}`);
        callback(null, { status: 'ON' });
    },
    TurnOff: (call, callback) => {
        // Simulate turning off the light
        console.log(`Turning off light in room: ${call.request.room_id}`);
        callback(null, { status: 'OFF' });
    },
    SetBrightness: (call, callback) => {
        // Simulate setting the brightness level
        console.log(`Setting brightness level to ${call.request.brightness_level} in room: ${call.request.room_id}`);
        callback(null, { status: 'BRIGHTNESS_SET' });
    },
};

// Create and start the gRPC server
function main() {
    const server = new grpc.Server();
    server.addService(lightingProto.LightingService.service, lightingService);
    server.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), () => {
        console.log('Lighting Service running on port 50051');
        server.start();
    });
}

main();
